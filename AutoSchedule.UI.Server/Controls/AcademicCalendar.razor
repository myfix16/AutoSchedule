<div>
    <table class="calendar-table" border="1">
        <thead>
            <tr>
                <td class="calendar-table-head">Time</td>
                @foreach (var workDay in workDays)
                {
                    <td class="calendar-table-head">@workDay</td>
                }
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < 25; i++)
            {
            <tr>
                <td class="calendar-table-content">@($"{((i + 1) / 2) + 8}:{(i % 2 == 0 ? "30" : "00")}")</td>
                @* @if (i % 2 == 0)
                {
                    <td class="calendar-table-content" rowspan="2">@($"{(i / 2) + 8}:{30}")</td>
                } *@
                @for (int j = 0; j < 5; j++)
                {
                    // TODO: This method is so stupid. There might be an elegant way to do that.
                    @if (classPlaceIdentifier[i,j] is DisplayedSession displayedSession)
                    {
                        @if (displayedSession.IsPlaceHolder) continue;

                        <td class="calendar-table-content" rowspan=@displayedSession.RowSpan>
                            <AcademicCalendarItem
                                SessionName=@(displayedSession.Name)
                                SessionType=@($"{displayedSession.SessionType} {displayedSession.Code}")
                                SessionTime=@($"{displayedSession.SessionTime.StartTime}-{displayedSession.SessionTime.EndTime}")
                                SessionLocation=@(string.Empty)>
                            </AcademicCalendarItem>
                        </td>
                    }
                    else { <td class="calendar-table-content"></td> }
                }
            </tr>
            }
        </tbody>
    </table>
</div>

@code {
    List<string> workDays = new List<string> { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday" };

    private Schedule _scheduleSource = new();
    [Parameter]
    public Schedule ScheduleSource
    {
        get => _scheduleSource;
        set { _scheduleSource = value; OnScheduleSourceChanged().GetAwaiter().GetResult(); }
    }

    private List<DisplayedSession> displayedSessions = new();

    private DisplayedSession [,] classPlaceIdentifier = new DisplayedSession [25,5];

    [Parameter]
    public EventCallback<Schedule> ScheduleSourceChanged { get; set; }

    private async Task OnScheduleSourceChanged()
    {
        classPlaceIdentifier = new DisplayedSession [25,5];

        UpdateDisplayedSessions();
        DisplaySessions();
        StateHasChanged();

        await ScheduleSourceChanged.InvokeAsync(this.ScheduleSource);
    }

    private void DisplaySessions()
    {
        foreach (var session in displayedSessions)
        {
            // !Given there is no class in Sunday
            int columnIndex = ((int)session.SessionTime.DayOfWeek) - 1;
            int rowIndex = (session.SessionTime.StartTime.TotalMinutes / 30) - 17;
            int classDuration = session.SessionTime.EndTime.TotalMinutes - session.SessionTime.StartTime.TotalMinutes;
            session.RowSpan = classDuration % 30 == 0 ? classDuration / 30 : classDuration / 30 + 1;
            classPlaceIdentifier[rowIndex, columnIndex] = session;

            // Add placeholder
            for (int i = 1; i < session.RowSpan; i++)
            {
                classPlaceIdentifier[rowIndex+i, columnIndex] = new DisplayedSession { IsPlaceHolder=true };
            }
        }
    }

    private void UpdateDisplayedSessions()
    {
        displayedSessions.Clear();

        foreach (var lecture in ScheduleSource.Lectures)
        {
            foreach (var sessionTime in lecture.SessionTimes)
            {
                AddDisplayedSession(lecture, sessionTime);
            }
        }

        foreach (var tutorial in ScheduleSource.Tutorials)
        {
            foreach (var sessionTime in tutorial.SessionTimes)
            {
                AddDisplayedSession(tutorial, sessionTime);
            }
        }
    }

    private void AddDisplayedSession(Session session, SessionTime newSessionTime)
    {
        displayedSessions.Add(
            new DisplayedSession
            {
                SessionType = session.SessionType,
                Instructor = session.Instructor,
                Code = session.Code,
                Name = session.Name,
                SessionTime = newSessionTime,
            });
    }
}

<style>
    .calendar-table {
        border-collapse: collapse;
        width: 100%;
        height: 100%;
        border-style: solid;
        margin-left: auto;
        margin-right: auto;
        background-color: white;
    }

    .calendar-table-head {
        width: 9.0909%;
        height: 3.7037%;
        text-align: center;
    }

    .calendar-table-content {
        height: 7.4074%;
        text-align: center;
    }
</style>