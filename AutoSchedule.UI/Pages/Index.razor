@page "/"
@inject HttpClient Http
@inject AppDataService DataService

<h3 class="ms-fontSize-42 ms-fontWeight-regular">Welcome to Auto Schedule</h3>
<p class="ms-fontSize-20 ms-fontWeight-regular">Auto Schedule allows you to arrange your academic schedule easily</p>
<br />

<div class="container">
    <div class="row">
        <div class="col-lg-12">
            <div id="available-courses-section">
                <div id="course-list-label-section">
                    <h4>Available Courses</h4>
                </div>
                <div id="course-filter-section">
                    <div class='e-input-group' style="margin: 0px 0px 8px">
                        <input class='e-input' Placeholder="Search" type='text' @bind=SearchBoxText @bind:event="oninput">
                        <span class="e-input-group-icon e-input-search"></span>
                    </div>
                </div>
            </div>
            <div id="selected-courses-section">
                <div id="course-list-label-section">
                    <h4>Selected Courses</h4>
                </div>
                <div id="course-filter-section">
                    <SfButton @onclick=OnClickMakeSchedule>Make Schedule</SfButton>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div id="available-courses-section">
                <SfListBox
                    TValue="string[]"
                    TItem="string"
                    DataSource=@FilteredClasses
                    @ref=availableCoursesListBox
                    Scope=@availableScope
                    SortOrder="Syncfusion.Blazor.DropDowns.SortOrder.Ascending"
                    Height=@boxHeight>
                    <ListBoxToolbarSettings Items=@toolBarItems/>
                    <ListBoxEvents TValue="string[]" TItem="string" ValueChange="OnFilteredClassesChanged"/>
                </SfListBox>
            </div>
            <div id="selected-courses-section">
                <SfListBox
                    TValue="string[]"
                    TItem="string"
                    DataSource=@SelectedClasses
                    @ref="selectedCoursesListBox"
                    Scope=@selectedScope
                    SortOrder="Syncfusion.Blazor.DropDowns.SortOrder.Ascending"
                    Height=@boxHeight>
                    <ListBoxEvents TValue="string[]" TItem="string" ValueChange="OnSelectedClassesChanged"/>
                </SfListBox>
            </div>
        </div>
    </div>
    <br />
    <br />
    <div class="row">
        <div class="col-lg-6">
            <SfListBox
                TValue="string[]"
                TItem="Schedule"
                DataSource=@AvailableSchedules
                Height="200px">
                <ListBoxFieldSettings Text="ID" Value="ID" />
            </SfListBox>
        </div>
        <div class="col-lg-6" style="margin: auto">
            <SfButton CssClass="view-schedule">View Schedule</SfButton>
        </div>
    </div>
    <br />
    <br />
</div>

@code {
    // TODO: Build two-way data binding between listbox and properties
    public string boxHeight = "400px";
    // Things for the dual list box
    SfListBox<string[], string> availableCoursesListBox;
    SfListBox<string[], string> selectedCoursesListBox;
    SfListBox<string[], string> availableScope;
    SfListBox<string[], string> selectedScope;

    public string[] toolBarItems = new string[] { "MoveTo", "MoveFrom", "MoveAllTo", "MoveAllFrom" };

    private string _searchBoxText;
    public string SearchBoxText
    {
        get => _searchBoxText;
        set { _searchBoxText = value; OnFilterChanged(); }
    }

    public ObservableCollection<string> FilteredClasses { get; set; } = new();
    public ObservableCollection<string> SelectedClasses { get; set; } = new();
    public ObservableCollection<Schedule> AvailableSchedules { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        DataService.AvailableSessions = await Http.GetFromJsonAsync<List<List<Session>>>("data/classList.json");
        DataService.AvailableClasses = DataService.AvailableSessions
            .Select(l => l.First().Name).Distinct().OrderBy(s => s);
        foreach (var item in DataService.AvailableClasses) FilteredClasses.Add(item);

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            availableScope = selectedCoursesListBox;
            selectedScope = availableCoursesListBox;
            // Re-render component to update the ListBox component Scope references in each connected ListBox.
            StateHasChanged();
        }
    }

    public void OnFilterChanged()
    {
        var filtered = (SearchBoxText == null || SearchBoxText == string.Empty)
            ? FilterClasses(DataService.AvailableClasses, string.Empty) : FilterClasses(DataService.AvailableClasses, SearchBoxText);
        Remove_NonMatching(filtered);
        AddBack_Contacts(filtered);
    }

    private IEnumerable<string> FilterClasses(IEnumerable<string> allClasses, string filterRef)
        // First, filter allClasses to get matched classes. Then, delete classes that are contained in SelectedClasses.
        => allClasses.Where(c => c.Contains(filterRef, StringComparison.InvariantCultureIgnoreCase))
                     .Where(c => !SelectedClasses.Contains(c));

    private void Remove_NonMatching(IEnumerable<string> filteredData)
    {
        for (int i = FilteredClasses.Count - 1; i >= 0; i--)
        {
            var item = FilteredClasses[i];
            if (!filteredData.Contains(item)) FilteredClasses.Remove(item);
        }
    }

    private void AddBack_Contacts(IEnumerable<string> filteredData)
    {
        foreach (var item in filteredData)
        {
            if (!FilteredClasses.Contains(item)) FilteredClasses.Add(item);
        }
    }

    public void OnFilteredClassesChanged(ListBoxChangeEventArgs<string[], string> e)
    {
        System.Console.WriteLine("Filtered Classes Changed");
    }

    public void OnSelectedClassesChanged(ListBoxChangeEventArgs<string[], string> e)
    {
        System.Console.WriteLine("Selected Classes Changed");
    }

    public void OnClickMakeSchedule()
    {
        var generatedSchedules = ClassSelector.FindSchedules(
            DataService.AvailableSessions.Where(s => SelectedClasses.Contains(s.First().Name)));
        AvailableSchedules.Clear();
        foreach (var item in generatedSchedules) AvailableSchedules.Add(item);

        System.Console.WriteLine("Make Schedule Button Clicked.");
    }
}